parameters:
  python_version: "3.6" # defaults for any parameters that aren't specified
  extras: [] # poetry extra deps to install
  poetry_version: ""

steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: "${{ parameters.python_version }}"

  - bash: |
      echo EXTRAS=$(python -c "import os;print(','.join(sorted(set(os.getenv('EXTRAS', '').split(',')))))")
      echo "##vso[task.setvariable variable=EXTRAS]$EXTRAS"
      echo "##vso[task.setvariable variable=PY]$(python -VV)"
      echo "##vso[task.prependpath]$HOME/.poetry/bin"
    displayName: set env variables
    env:
      EXTRAS: ${{ join(' ', parameters.extras) }}

  - task: Cache@2
    inputs:
      key: '"pip" | "2" | "$(Agent.OS)" | "$(PY)" | poetry.lock | "$(EXTRAS)"'
      restoreKeys: |
        "pip" | "2" | "$(Agent.OS)" | "$(PY)" | poetry.lock
      path: $(Pipeline.Workspace)/venv
      cacheHitVar: CACHE_RESTORED
    displayName: Cache Python Packages

  - script: python -m venv venv
    condition: ne(variables.CACHE_RESTORED, 'true')
    displayName: Create Virtualenv
    workingDirectory: $(Pipeline.Workspace)

  - bash: |
      if [[ -z "${POETRY_VERSION}" ]];then
          curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python
      else
          curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python - --version "${POETRY_VERSION}"
      fi
    displayName: Install poetry
    env:
      POETRY_VERSION: ${{ parameters.poetry_version }}

  - powershell: |
      Write-Host "##vso[task.prependpath]$(Pipeline.Workspace)\venv\Scripts"

      cd $(Pipeline.Workspace)
      .\venv\Scripts\Activate.ps1

      cd $(Build.SourcesDirectory)

      if( "$env:EXTRAS" -eq "" ){
          ~/.poetry/bin/poetry.bat install
      }else{
          ~/.poetry/bin/poetry.bat install --extras "$env:EXTRAS"
      }

    displayName: Install Packages on Windows
    condition: eq(variables['Agent.OS'], 'Windows_NT')

  - bash: |
      echo "##vso[task.prependpath]$(Pipeline.Workspace)/venv/bin"
      source $(Pipeline.Workspace)/venv/bin/activate
      if [[ -z "$EXTRAS" ]];then
        poetry install
      else
        poetry install --extras "$EXTRAS"
      fi
    displayName: Install Packages on *nix
    condition: ne(variables['Agent.OS'], 'Windows_NT')
