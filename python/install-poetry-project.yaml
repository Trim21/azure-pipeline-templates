parameters:
  python_version: "3.6" # defaults for any parameters that aren't specified
  extras: [] # poetry extra deps to install
  poetry_version: ""

steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: "${{ parameters.python_version }}"

  - bash: |
      echo "##vso[task.setvariable variable=PY]$(python -VV)"
      if [[ "$(Agent.OS)" == 'Windows_NT' ]];then
        echo "##vso[task.prependpath]$PWD/.venv/Scripts"
      else
        echo "##vso[task.prependpath]$PWD/.venv/bin"
      fi
      echo "##vso[task.prependpath]$HOME/.poetry/bin"
    displayName: set env variables

  - task: Cache@2
    inputs:
      key: '"pip" | "0.0.1" | "$(Agent.OS)" | "$(PY)" | poetry.lock'
      restoreKeys: |
        "pip" | "0.0.1" | "$(Agent.OS)" | "$(PY)" | poetry.lock
        "pip" | "0.0.1" | "$(Agent.OS)" | "$(PY)"
      path: $(Build.Repository.LocalPath)/.venv
    displayName: Cache pip

  - bash: |
      if [[ -z "${{ parameters.poetry_version }}" ]];then
        curl -sSL https://raw.githubusercontent.com/sdispater/poetry/master/get-poetry.py | python
      else
        curl -sSL https://raw.githubusercontent.com/sdispater/poetry/master/get-poetry.py | python - --version "${{ parameters.poetry_version }}"
      fi
      poetry config virtualenvs.in-project true
      if [[ -z "$EXTRAS" ]];then
        poetry install
      else
        poetry install --extras "$EXTRAS"
      fi
    displayName: Install Packages
    env:
      EXTRAS: ${{ join(' ', parameters.extras) }}
