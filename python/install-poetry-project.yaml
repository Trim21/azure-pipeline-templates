parameters:
  python_version: "3.6" # defaults for any parameters that aren't specified
  extras: [] # poetry extra deps to install
  poetry_version: ""

steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: "${{ parameters.python_version }}"

  - bash: |
      EXTRAS=$(python -c "import os;print(','.join(sorted(set(os.getenv('EXTRAS', '').split(',')))))")
      PYV=$(python -c "import sys;print(''.join(sys.version.splitlines()))")
      echo "##vso[task.setvariable variable=EXTRAS]$EXTRAS"
      echo "##vso[task.setvariable variable=PY]$PYV"
      echo "##vso[task.prependpath]$HOME/.poetry/bin"

      LATEST_POETRY=$(curl -sSL https://pypi.org/pypi/poetry/json | python -c "import json;d=json.loads(input());print(d['info']['version'])")
      POETRY_VERSION=$(python -c "v = '$WANT_POETRY';print(v if v else '$LATEST_POETRY')")
      echo "##vso[task.setvariable variable=POETRY_VERSION]$POETRY_VERSION"

      POETRY_HOME=$(python -c 'from os import path;print(path.normpath(path.expanduser("~/.poetry")))')
      echo "##vso[task.setvariable variable=POETRY_HOME]$POETRY_HOME"
      echo "##vso[task.setvariable variable=PYTHONUSERBASE]$(Pipeline.Workspace)/.py"

    displayName: set env variables
    env:
      EXTRAS: ${{ join(' ', parameters.extras) }}
      WANT_POETRY: ${{ parameters.poetry_version }}

  - task: Cache@2
    inputs:
      key: '"poetry" | "1" | "$(Agent.OS)" | "$(PY)" | "$(POETRY_VERSION)"'
      path: $(POETRY_HOME)
      cacheHitVar: POETRY_CACHE_RESTORED
    displayName: Cache Poetry

  - bash: |
      curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python - --version "${POETRY_VERSION}"
    displayName: Install poetry
    condition: ne(variables.POETRY_CACHE_RESTORED, 'true')

  - task: Cache@2
    inputs:
      key: '"pip" | "3" | "$(Agent.OS)" | "$(PY)" | poetry.lock | "$(EXTRAS)"'
      restoreKeys: |
        "pip" | "3" | "$(Agent.OS)" | "$(PY)" | poetry.lock | ""
        "pip" | "3" | "$(Agent.OS)" | "$(PY)" | poetry.lock
      path: $(Pipeline.Workspace)/.py
      cacheHitVar: CACHE_RESTORED
    displayName: Cache Python Packages


  - powershell: |
      if( "$env:EXTRAS" -eq "" ){
          ~/.poetry/bin/poetry.bat install
      }else{
          ~/.poetry/bin/poetry.bat install --extras "$env:EXTRAS"
      }

      $files = Get-ChildItem -Path $(Pipeline.Workspace)\.py
      foreach ($file in $files) {
          Write-Host "##vso[task.prependpath]$(Pipeline.Workspace)\.py\$file\Scripts"
      }

    displayName: Install Packages on Windows
    condition: eq(variables['Agent.OS'], 'Windows_NT')
    env:
      PIP_USER: '1'
      POETRY_VIRTUALENVS_CREATE: 'false'

  - bash: |
      echo "##vso[task.prependpath]$(Pipeline.Workspace)/.py/bin"
      if [[ -z "$EXTRAS" ]];then
        poetry install
      else
        poetry install --extras "$EXTRAS"
      fi
    displayName: Install Packages on *nix
    condition: ne(variables['Agent.OS'], 'Windows_NT')
    env:
      PIP_USER: '1'
      POETRY_VIRTUALENVS_CREATE: 'false'
